<params>
	<param key = 'layer' value = '1' />
	<param key = 'type' value = 'challenge' />
</params>
<planes>
	<plane name = 'Untitled Plane' x = '0' y = '0' modal = '0'>
		<structure>
			0 0 0 0 0 0 0 0 0 212 213 0 0 0 0 0 0 0 0 0 0 
			0 0 0 0 0 0 0 152 189 193 188 208 188 153 0 0 0 0 0 0 0 
			0 0 0 0 0 0 190 153 179 0 0 0 163 152 189 0 0 0 0 0 0 
			0 0 0 0 0 187 162 154 0 0 0 217 0 153 163 183 0 0 0 0 0 
			0 0 0 0 0 215 214 153 0 0 215 0 212 152 0 0 0 0 0 0 0 
			0 0 0 153 188 190 183 153 197 207 181 85 188 154 193 197 194 153 0 0 0 
			0 0 0 154 0 162 173 153 174 0 0 0 177 153 160 178 0 153 0 0 0 
			0 0 0 153 0 0 163 153 0 218 0 0 0 152 160 0 0 153 0 0 0 
			0 0 0 152 219 217 0 152 0 0 215 0 0 152 214 219 217 154 0 0 0 
			0 0 0 189 0 0 183 154 198 86 181 210 182 154 194 0 0 191 0 0 0 
			0 0 0 0 0 185 179 153 171 0 0 0 176 152 169 195 0 0 0 0 0 
			0 0 0 0 180 177 166 153 0 0 0 218 0 152 178 176 192 0 214 0 0 
			0 0 207 0 212 215 0 153 214 0 0 0 211 154 214 215 0 215 185 0 0 
			0 0 180 198 184 194 198 192 199 194 196 85 186 192 196 198 195 189 163 0 0 
			0 0 0 0 0 162 174 0 0 174 177 168 0 0 167 169 0 0 0 0 0 
		</structure>
	</plane>
	<plane name = 'mask' x = '0' y = '0' modal = '1'>
		<structure>
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 0 0 0 0 0 0 0 302 0 0 0 300 0 0 0 0 0 0 0 0 
			0 0 0 0 0 300 302 0 0 0 0 0 0 0 300 302 0 0 0 0 0 
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 0 0 0 0 300 0 0 302 0 0 0 300 0 0 302 0 0 0 0 0 
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 0 0 300 0 0 0 0 0 0 0 0 0 0 0 0 0 302 0 0 0 
			0 0 0 0 0 0 0 0 302 0 0 0 300 0 0 0 0 0 0 0 0 
			0 0 0 0 300 0 302 0 0 0 0 0 0 0 300 0 302 0 0 0 0 
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 0 300 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 302 0 0 
			0 0 0 0 0 300 302 0 0 300 0 302 0 0 300 302 0 0 0 0 0 
		</structure>
	</plane>
</planes>
<entities>
	<entity x = '6' y = '12' genus = '2' ai-behavior = '1' name = 'player1' class = '' nick = '' title = '' />
	<entity x = '3' y = '1' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '2' y = '2' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '4' y = '0' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '16' y = '0' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '17' y = '1' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '18' y = '2' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '18' y = '4' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '2' y = '4' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '16' y = '4' genus = '6' ai-behavior = '1' name = 'gold.uid.0' class = '' nick = '' title = '' />
	<entity x = '12' y = '8' genus = '6' ai-behavior = '1' name = 'gold.uid.1' class = '' nick = '' title = '' />
	<entity x = '11' y = '2' genus = '6' ai-behavior = '1' name = 'gold.uid.2' class = '' nick = '' title = '' />
	<entity x = '9' y = '7' genus = '6' ai-behavior = '1' name = 'gold.uid.3' class = '' nick = '' title = '' />
	<entity x = '10' y = '11' genus = '6' ai-behavior = '1' name = 'gold.uid.4' class = '' nick = '' title = '' />
	<entity x = '2' y = '11' genus = '6' ai-behavior = '1' name = 'gold.uid.5' class = '' nick = '' title = '' />
	<entity x = '16' y = '12' genus = '6' ai-behavior = '1' name = 'gold.uid.6' class = '' nick = '' title = '' />
	<entity x = '8' y = '0' genus = '6' ai-behavior = '1' name = 'gold.uid.7' class = '' nick = '' title = '' />
	<entity x = '5' y = '2' genus = '6' ai-behavior = '1' name = 'gold.uid.8' class = '' nick = '' title = '' />
	<entity x = '4' y = '10' genus = '6' ai-behavior = '1' name = 'gold.uid.9' class = '' nick = '' title = '' />
</entities>
<triggers>
	<trigger name = 'origin' x = '5' y = '12' width = '1' height = '1' behavior = '1' prompt = ''>
		<touch>
		</touch>
		<hover>
		</hover>
		<exit>
		</exit>
	</trigger>
</triggers>
<scripts>
	<script name = 'on-arrival'>
        if ( session("core.challenge.wave").get() == 1 ) { map().runScript("wave1:begin"); }
        elif ( session("core.challenge.wave").get() == 2 ) { map().runScript("wave2:begin"); }
        elif ( session("core.challenge.wave").get() == 3 ) { map().runScript("wave3:begin"); }
        else { map().runScript("wave1:begin"); }
    </script>
	<script name = 'wave1:begin'>
		map().executeScript("wave1:cleanup");

        // Params
        map()
            .enableAllGold()    // all gold online

            // text labels
            .setParams({
                "overview": "With a superpowered mining laser, collect all of the gold on the level.",
                "wave-goal": "When you dig a tile with your [color=special]mining laser[/color], you destroy it [color=special]forever[/color].  Enemies will simply fall right through the empty air.  Collect all of the gold on the map to complete this wave!"
            })

            .setWaveParams({
                "on-complete": "wave1:complete",    // complete wave script
                "digs-purge": 1,                    // digs purge tiles
                "on-enemy-kill": "wave1:add-enemy"  // replace disposables with new disposables, looks like respawners but enemies don't keep gold
            });

        // Player must "collect" all gold
        map().setWaveRequirement(
            "gold",
            map().countGold()
        );

        // Show progress chart / begin new wave
        map()
            .showWaveProgressChart()
            .beginWave();


        // Start with 3 disposables
        map().spawnRandomEnemies(
            3,
            {
                "disposable": True
            }
        );
	</script>
	<script name = 'wave1:cleanup'>
		// Remove timer(s)
        // No timer on this wave

        // End wave
        map().endWave();
	</script>
    <script name = 'wave1:add-enemy'>
        // 1 new disposable
        map().spawnRandomEnemies(
            1,
            {
                "disposable": True
            }
        );
    </script>
	<script name = 'wave1:complete'>
		map().executeScript("wave1:cleanup");

        // Track that we advanced to the next wave
        session("core.challenge.wave").increment(1);

        // Remove enemies
        map().removeEnemies();

        // Post complete nag
        postNewsItem("Wave Complete!", "Prepare for another wave...");

        // Advance to next wave in a moment
        createTimer({
            "name": "timerNextWave",
            "on-complete": "script:wave2:begin",
            "length": 5,
            "measure": "seconds"
        });
	</script>
	<script name = 'wave2:begin'>
		map().executeScript("wave2:cleanup");

        // Params
        map()
            .disableAllGold()    // take all gold offline, irrelevant in this wave

            // text labels
            .setParams({
                "overview": "Use the spikes on this level to kill multiple enemies.",
                "wave-goal": "You must use the spikes on this level to kill [color=special]15[/color] bad guys.  The more bad guys you kill, the more new bad guys you will face!"
            })

            .setWaveParams({
                "on-complete": "wave2:complete",    // complete wave script
                "on-enemy-kill": "wave2:add-enemy"  // killing a bad guy creates new bad guys
            });

        // Player must kill 15 enemies via spikes
        map().setWaveRequirement("enemy-kills:deadly-tile", 15);

        // Show progress chart / begin new wave
        map()
            .showWaveProgressChart()
            .beginWave();


        // Start with 2 respawners
map().spawnRandomEnemies(
            2,
            {
                "disposable": False
            }
        );
	</script>
	<script name = 'wave2:add-enemy'>
		// Limit to 6
        if ( map().countEnemies() &lt; 6 )
        {
            map().spawnRandomEnemies(
                1,
                {
                    "disposable": False
                }
            );
        }
	</script>
	<script name = 'wave2:cleanup'>
		// Remove timer(s)
        // No timer on this wave

        // End wave
        map().endWave();
	</script>
	<script name = 'wave2:complete'>
		map().executeScript("wave2:cleanup");

        // Track that we advanced to the next wave
        session("core.challenge.wave").increment(1);

        // Remove enemies
        map().removeEnemies();

        // Post complete nag
postNewsItem("Wave Complete!", "Prepare for another wave...");

        // Advance to next wave in a moment
        createTimer({
            "name": "timerNextWave",
            "on-complete": "script:wave3:begin",
            "length": 5,
            "measure": "seconds"
        });
	</script>
	<script name = 'wave3:begin'>
		map().executeScript("wave3:cleanup");

        // Params
        map()
            .disableAllGold()    // disable all gold; setting gold rotation will implicitly bring n pieces online

            // text labels
            .setParams({
                "overview": "Collect [color=special]20 gold pieces[/color] as an increasing number of enemies hunts you down!",
                "wave-goal": "Every [color=special]4th[/color] piece of gold you collect summons a [color=special]new enemy[/color].  Plan accordingly!"
            })

            .setWaveParams({
                "on-collect-gold": "wave3:collect-gold", // spawn enemy every nth piece
                "on-complete": "wave3:complete",         // complete wave script
                "gold-rotation-size": 3
            });

        // Player must collect 20 gold
        map().setWaveRequirement("gold", 20);

        // Show progress chart / begin new wave
        map()
            .showWaveProgressChart()
            .beginWave();


        // Start with 2 respawners
map().spawnRandomEnemies(
            2,
            {
                "disposable": False
            }
        );
	</script>
	<script name = 'wave3:cleanup'>
		// End wave
        map().endWave();
	</script>
	<script name = 'wave3:collect-gold'>
		if ( map().getWaveCounter("gold") % 4 == 0 )
        {
            // Add a new respawner
    map().spawnRandomEnemy({
                "disposable": False
            });
        }
	</script>
	<script name = 'wave3:complete'>
		map().executeScript("wave3:cleanup");

        // Remove enemies
        map().removeEnemies();

        // Post complete nag
postNewsItem("Wave Complete!", "All waves cleared...");

        // Show victory menu
        showChallengeOutro();
	</script>
</scripts>
