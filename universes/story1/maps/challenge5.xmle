<params>
	<param key = 'layer' value = '1' />
	<param key = 'type' value = 'challenge' />
</params>
<planes>
	<plane name = 'Untitled Plane' x = '0' y = '0' modal = '0'>
		<structure>
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 0 0 212 212 213 0 232 213 212 0 0 0 215 215 0 209 0 
			0 0 153 222 23 24 24 226 225 220 154 227 27 29 225 152 228 0 
			0 221 153 202 204 0 0 0 202 205 154 200 0 205 202 153 0 0 
			0 200 152 205 0 0 232 0 0 213 154 0 0 0 204 152 220 0 
			0 0 152 0 0 217 222 222 154 25 228 221 216 0 0 152 0 0 
			0 234 154 216 217 0 0 0 154 0 0 0 0 216 216 152 0 0 
			0 221 152 0 0 216 0 213 152 0 211 0 219 0 233 153 224 0 
			0 203 154 210 0 0 224 24 222 154 25 225 0 0 220 152 204 0 
			0 0 152 220 0 0 0 0 0 154 0 0 0 0 204 153 0 0 
			0 0 154 211 212 0 215 233 0 152 0 214 214 0 0 152 209 0 
			0 228 227 29 225 153 28 220 23 28 225 222 221 153 25 223 226 0 
			0 0 205 203 217 153 218 0 219 217 217 229 216 153 218 200 0 0 
			0 0 204 0 0 0 0 228 0 0 0 223 0 0 0 0 0 0 
		</structure>
	</plane>
	<plane name = 'mask' x = '0' y = '0' modal = '1'>
		<structure>
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 0 0 265 0 0 0 283 0 263 0 265 0 0 265 0 0 0 
			0 0 0 0 302 0 0 0 300 0 0 302 0 300 0 0 0 0 
			0 300 0 0 0 0 0 0 0 0 0 0 0 0 300 0 0 0 
			0 0 0 0 0 0 300 263 0 0 283 302 0 0 0 0 0 0 
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 0 0 0 0 0 263 0 265 0 0 283 0 0 0 0 302 0 
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 300 0 0 0 
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 300 263 0 265 0 0 265 0 0 283 0 263 0 0 283 0 0 
			0 0 0 302 0 0 0 0 0 0 0 0 0 0 0 300 0 0 
			0 0 300 0 0 0 0 302 0 0 0 300 0 0 0 0 0 0 
		</structure>
	</plane>
</planes>
<entities>
	<entity x = '7' y = '5' genus = '2' ai-behavior = '1' name = 'player1' class = '' nick = '' title = '' />
	<entity x = '3' y = '0' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '5' y = '0' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '7' y = '0' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '9' y = '0' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '11' y = '0' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '13' y = '0' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '15' y = '0' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '6' y = '2' genus = '6' ai-behavior = '1' name = 'gold.uid.0' class = '' nick = '' title = '' />
	<entity x = '12' y = '2' genus = '6' ai-behavior = '1' name = 'gold.uid.1' class = '' nick = '' title = '' />
	<entity x = '11' y = '5' genus = '6' ai-behavior = '1' name = 'gold.uid.2' class = '' nick = '' title = '' />
	<entity x = '6' y = '7' genus = '6' ai-behavior = '1' name = 'gold.uid.3' class = '' nick = '' title = '' />
	<entity x = '8' y = '11' genus = '6' ai-behavior = '1' name = 'gold.uid.4' class = '' nick = '' title = '' />
	<entity x = '4' y = '9' genus = '6' ai-behavior = '1' name = 'gold.uid.5' class = '' nick = '' title = '' />
	<entity x = '1' y = '3' genus = '6' ai-behavior = '1' name = 'gold.uid.6' class = '' nick = '' title = '' />
	<entity x = '7' y = '13' genus = '6' ai-behavior = '1' name = 'gold.uid.7' class = '' nick = '' title = '' />
	<entity x = '12' y = '9' genus = '6' ai-behavior = '1' name = 'gold.uid.8' class = '' nick = '' title = '' />
	<entity x = '13' y = '6' genus = '6' ai-behavior = '1' name = 'gold.uid.9' class = '' nick = '' title = '' />
</entities>
<triggers>
	<trigger name = 'origin' x = '10' y = '8' width = '1' height = '1' behavior = '1' prompt = ''>
		<touch>
		</touch>
		<hover>
		</hover>
		<exit>
		</exit>
	</trigger>
</triggers>
<scripts>
	<script name = 'on-arrival'>
        if ( session("core.challenge.wave").get() == 1 ) { map().runScript("wave1:begin"); }
        elif ( session("core.challenge.wave").get() == 2 ) { map().runScript("wave2:begin"); }
        elif ( session("core.challenge.wave").get() == 3 ) { map().runScript("wave3:begin"); }
        else { map().runScript("wave1:begin"); }
    </script>
	<script name = 'wave1:begin'>
		map().executeScript("wave1:cleanup");

        // Params
        map()
            .enableAllGold()    // bring all gold online

            // text labels
            .setParams({
                "overview": "With a superpowered mining laser at your disposal, collect all of the gold on the level.",
                "wave-goal": "When you use your [color=special]mining laser[/color] to dig a tile, you will [color=special]permanently[/color] destroy it for the duration of the wave.  Enemies will [color=special]not[/color] fall into the trap; instead, they will fall through the empty air completely!"
            })

            .setWaveParams({
                "on-complete": "wave1:complete",    // complete wave script
                "digs-purge": 1,                    // digging a tile removes it from map entirely!
                "enemies-collect-gold": 0           // makes it too hard otherwise
            });

        // Player must collect all gold before time runs out
        map().setWaveRequirement(
            "gold",
            map().countGold()
        );

        // Show progress chart / begin new wave
        map()
            .showWaveProgressChart()
            .beginWave();


        // Start with 2 respawners
map().spawnRandomEnemies(
            2,
            {
                "disposable": False
            }
        );

        // Survival timer
        createTimer({
            "name": "timerLimit",
            "on-complete": "universe:kill-player",
            "length": 90,
            "measure": "seconds"
        });

        // Display timer / status message on screen
        map()
            .setWaveParams({
                "active-timer": "timerLimit",
                "active-timer-label": "Survive!"
            });
	</script>
	<script name = 'wave1:cleanup'>
		// Remove timer(s)
        clearTimer("timerLimit");

        // End wave
        map().endWave();
	</script>
	<script name = 'wave1:complete'>
		map().executeScript("wave1:cleanup");

        // Track that we advanced to the next wave
        session("core.challenge.wave").increment(1);

        // Remove enemies
        map().removeEnemies();

        // Post complete nag
postNewsItem("Wave Complete!", "Prepare for another wave...");

        // Advance to next wave in a moment
        createTimer({
            "name": "timerNextWave",
            "on-complete": "script:wave2:begin",
            "length": 5,
            "measure": "seconds"
        });
	</script>
	<script name = 'wave2:begin'>
		map().executeScript("wave2:cleanup");

        // Params
        map()
            .disableAllGold()    // take all gold offline.  setting gold rotation will implicitly activate n gold pieces

            // text labels
            .setParams({
                "overview": "Without access to your mining laser, you must trick enemies into picking up deadly gold pieces.",
                "wave-goal": "You [color=special]cannot dig[/color] during this wave!  If an enemy touches a piece of gold, that enemy will die.  Using this strategy, you must [color=special]kill 8 enemies[/color]."
            })

            // player can't dig this wave!
            .setWaveAllowances({
                "digs": 0
            })

            .setWaveParams({
                "on-complete": "wave2:complete",    // complete wave script
                "on-enemy-collect-gold": "wave2:kill-enemies-with-gold", // this emulates an enemy dying when he touches gold
                "on-enemy-kill": "wave2:add-enemy", // add a new disposable to replace dead bad guys
                "gold-rotation-size": 3
            });

        // Player must kill 8 enemies!
        map().setWaveRequirement("enemy-kills", 8);

        // Show progress chart / begin new wave
        map()
            .showWaveProgressChart()
            .beginWave();


        // Start with 2 disposables
map().spawnRandomEnemies(
            2,
            {
                "disposable": True
            }
        );
	</script>
	<script name = 'wave2:cleanup'>
		// Remove timer(s)
        clearTimer("timerAddBomb");

        // End wave
        map().endWave();
	</script>
	<script name = 'wave2:add-enemy'>
		map().spawnRandomEnemies(
            1,
            {
                "disposable": True
            }
        );
	</script>
	<script name = 'wave2:kill-enemies-with-gold'>map().killEnemiesWithGold();</script>
	<script name = 'wave2:complete'>
		map().executeScript("wave2:cleanup");

        // Track that we advanced to the next wave
        session("core.challenge.wave").increment(1);

        // Remove enemies
        map().removeEnemies();

        // Post complete nag
postNewsItem("Wave Complete!", "Prepare for another wave...");

        // Advance to next wave in a moment
        createTimer({
            "name": "timerNextWave",
            "on-complete": "script:wave3:begin",
            "length": 5,
            "measure": "seconds"
        });
	</script>
	<script name = 'wave3:begin'>
		map().executeScript("wave3:cleanup");

        // Params
        map()
            .disableAllGold()    // disable all gold; setting gold rotation will implicitly bring n pieces online

            // text labels
            .setParams({
                "overview": "Collect [color=special]20 gold pieces[/color] as an increasing number of enemies hunts you down!",
                "wave-goal": "Every [color=special]5th[/color] piece of gold you collect summons a [color=special]new enemy[/color].  Plan accordingly!"
            })

            .setWaveParams({
                "on-collect-gold": "wave3:collect-gold", // spawn enemy every nth piece
                "on-complete": "wave3:complete",         // complete wave script
                "gold-rotation-size": 3
            });

        // Player must collect 20 gold
        map().setWaveRequirement("gold", 20);

        // Show progress chart / begin new wave
        map()
            .showWaveProgressChart()
            .beginWave();


        // Start with 2 respawners
map().spawnRandomEnemies(
            2,
            {
                "disposable": False
            }
        );
	</script>
	<script name = 'wave3:cleanup'>
		// End wave
        map().endWave();
	</script>
	<script name = 'wave3:collect-gold'>
		if ( map().getWaveCounter("gold") % 5 == 0 )
        {
            // Add a new respawner
    map().spawnRandomEnemy({
                "disposable": False
            });
        }
	</script>
	<script name = 'wave3:complete'>
		map().executeScript("wave3:cleanup");

        // Remove enemies
        map().removeEnemies();

        // Post complete nag
postNewsItem("Wave Complete!", "All waves cleared...");

        // Show victory menu
        showChallengeOutro();
	</script>
</scripts>
