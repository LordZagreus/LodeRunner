<params>
	<param key = 'layer' value = '1' />
	<param key = 'type' value = 'challenge' />
</params>
<planes>
	<plane name = 'Untitled Plane' x = '0' y = '0' modal = '0'>
		<structure>
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 0 0 191 187 197 0 0 0 188 194 0 0 0 194 195 197 0 0 0 
			0 0 0 0 0 0 215 214 0 0 0 0 0 0 0 0 212 0 0 0 
			0 0 152 187 219 217 184 185 152 216 218 152 188 193 217 219 192 152 0 0 
			0 184 153 0 0 0 0 0 152 0 0 152 0 0 0 0 0 154 0 0 
			0 0 154 0 211 212 0 0 152 219 217 152 0 214 214 0 211 153 187 0 
			0 0 154 194 188 193 188 187 154 0 0 154 180 189 197 207 190 152 165 0 
			0 190 153 174 207 177 161 0 154 219 219 153 0 178 172 194 172 152 0 0 
			0 174 153 166 195 165 0 152 181 0 0 194 154 0 162 162 160 152 0 0 
			0 0 153 171 166 0 0 154 217 217 219 219 152 0 0 177 173 154 181 0 
			0 0 154 172 0 0 152 193 0 0 0 0 181 154 0 0 174 154 178 0 
			0 191 153 0 211 211 153 217 219 217 217 218 219 152 211 213 0 152 172 0 
			0 0 154 191 187 190 188 0 0 0 0 0 0 191 198 180 190 152 0 0 
			0 195 153 214 0 216 0 214 213 217 216 0 0 212 216 0 0 153 210 0 
			0 167 181 182 187 0 195 187 185 0 0 183 189 185 0 199 192 189 182 0 
		</structure>
	</plane>
	<plane name = 'mask' x = '0' y = '0' modal = '1'>
		<structure>
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 0 0 0 0 302 0 0 0 300 0 0 0 0 0 0 0 0 0 0 
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 0 0 302 0 0 0 0 0 0 0 0 0 0 0 0 300 0 0 0 
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 302 0 
			0 0 0 0 0 0 302 0 0 0 0 0 0 300 0 0 0 0 0 0 
			0 300 0 0 0 0 0 0 302 0 0 300 0 0 0 0 0 0 0 0 
			0 0 0 0 302 0 0 0 0 0 0 0 0 0 0 300 0 0 0 0 
			0 0 0 0 0 0 0 302 0 0 0 0 300 0 0 0 0 0 0 0 
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 0 0 0 0 0 302 0 0 0 0 0 0 300 0 0 0 0 0 0 
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 300 0 0 302 0 300 0 302 0 0 300 0 302 0 300 0 0 302 0 
		</structure>
	</plane>
</planes>
<entities>
	<entity x = '7' y = '13' genus = '2' ai-behavior = '1' name = 'player1' class = '' nick = '' title = '' />
	<entity x = '4' y = '0' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '7' y = '0' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '12' y = '0' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '15' y = '0' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '3' y = '0' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '16' y = '0' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '9' y = '0' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '10' y = '0' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '15' y = '5' genus = '6' ai-behavior = '1' name = 'gold.uid.0' class = '' nick = '' title = '' />
	<entity x = '4' y = '3' genus = '6' ai-behavior = '1' name = 'gold.uid.1' class = '' nick = '' title = '' />
	<entity x = '9' y = '8' genus = '6' ai-behavior = '1' name = 'gold.uid.2' class = '' nick = '' title = '' />
	<entity x = '10' y = '4' genus = '6' ai-behavior = '1' name = 'gold.uid.3' class = '' nick = '' title = '' />
	<entity x = '10' y = '12' genus = '6' ai-behavior = '1' name = 'gold.uid.4' class = '' nick = '' title = '' />
	<entity x = '6' y = '13' genus = '6' ai-behavior = '1' name = 'gold.uid.5' class = '' nick = '' title = '' />
	<entity x = '3' y = '5' genus = '6' ai-behavior = '1' name = 'gold.uid.6' class = '' nick = '' title = '' />
	<entity x = '15' y = '13' genus = '6' ai-behavior = '1' name = 'gold.uid.7' class = '' nick = '' title = '' />
	<entity x = '13' y = '9' genus = '6' ai-behavior = '1' name = 'gold.uid.8' class = '' nick = '' title = '' />
	<entity x = '13' y = '2' genus = '6' ai-behavior = '1' name = 'gold.uid.9' class = '' nick = '' title = '' />
</entities>
<triggers>
	<trigger name = 'origin' x = '12' y = '13' width = '1' height = '1' behavior = '1' prompt = ''>
		<touch>
		</touch>
		<hover>
		</hover>
		<exit>
		</exit>
	</trigger>
</triggers>
<scripts>
	<script name = 'on-arrival'>
        if ( session("core.challenge.wave").get() == 1 ) { map().runScript("wave1:begin"); }
        elif ( session("core.challenge.wave").get() == 2 ) { map().runScript("wave2:begin"); }
        elif ( session("core.challenge.wave").get() == 3 ) { map().runScript("wave3:begin"); }
        else { map().runScript("wave1:begin"); }
    </script>
	<script name = 'wave1:begin'>
		map().executeScript("wave1:cleanup");

        // Params
        map()
            .enableAllGold()    // all gold online

            // text labels
            .setParams({
                "overview": "Without touching any of the dangerous gold, trick the enemies into picking up the cursed gold pieces.",
                "wave-goal": "You [color=special]cannot touch gold[/color] during this wave.  If you touch a piece of gold, you will [color=special]die[/color]!  In exactly the same way, if an enemy touches a piece of gold, that enemy will die and you will [color=special]receive his gold[/color].  Using this strategy, collect all of the gold on the map!"
            })

            .setWaveParams({
                "on-complete": "wave1:complete",    // complete wave script
                "on-collect-gold": "wave1:kill-player", // kill player when they touch cursed gold
                "on-enemy-collect-gold": "wave1:kill-enemies-with-gold", // this emulates an enemy dying when he touches gold
                "on-enemy-kill": "wave1:add-enemy", // add a new disposable to replace dead bad guys
            });

        // Player must "collect" all gold
        map().setWaveRequirement(
            "gold",
            map().countGold()
        );

        // Show progress chart / begin new wave
        map()
            .showWaveProgressChart()
            .beginWave();


        // Start with 3 disposables
        map().spawnRandomEnemies(
            3,
            {
                "disposable": True
            }
        );
	</script>
	<script name = 'wave1:kill-player'>
		createTimer({
            "name": "timerKillPlayer",
            "on-complete": "universe:kill-player",
            "length": 0,
            "measure": "seconds"
        });
	</script>
	<script name = 'wave1:cleanup'>
		// Remove timer(s)
        clearTimer("timerAddBomb");
        clearTimer("timerKillPlayer");

        // End wave
        map().endWave();
	</script>
	<script name = 'wave1:add-enemy'>
		map().spawnRandomEnemies(
            1,
            {
                "disposable": True
            }
        );
	</script>
	<script name = 'wave1:complete'>
		map().executeScript("wave1:cleanup");

        // Track that we advanced to the next wave
        session("core.challenge.wave").increment(1);

        // Remove enemies
        map().removeEnemies();

        // Post complete nag
        postNewsItem("Wave Complete!", "Prepare for another wave...");

        // Advance to next wave in a moment
        createTimer({
            "name": "timerNextWave",
            "on-complete": "script:wave2:begin",
            "length": 5,
            "measure": "seconds"
        });
	</script>
	<script name = 'wave1:kill-enemies-with-gold'>map().killEnemiesWithGold();</script>
	<script name = 'wave2:begin'>
		map().executeScript("wave2:cleanup");

        // Params
        map()
            .disableAllGold()    // take all gold offline, irrelevant in this wave

            // text labels
            .setParams({
                "overview": "Without access to your mining laser, survive for a short duration against multiple enemies.",
                "wave-goal": "You must last for [color=special]60 seconds[/color] against up to 4 bad guys, one spawning every 5 seconds.  You begin the wave with [color=special]3[/color] bombs, but you [color=special]cannot[/color] use your mining laser during this wave."
            })

            // no digging, 3 bombs
            .setWaveAllowances({
                "digs": 0,
                "bombs": 3
            })

            .setWaveParams({
                "on-complete": "wave2:complete"    // complete wave script
            });

        // Player must survive for 60 seconds
        map().setWaveRequirement("survive", 1);

        // Show progress chart / begin new wave
        map()
            .showWaveProgressChart()
            .beginWave();


        // Start with 1 respawner
map().spawnRandomEnemies(
            1,
            {
                "disposable": False
            }
        );

        // Add 3 respawners over time
        createTimer({
            "name": "timerAddEnemy",
            "on-complete": "script:wave2:add-enemy",
            "uses": 3,
            "length": 5,
            "measure": "seconds"
        });


        // Survival timer
        createTimer({
            "name": "timerSurvive",
            "on-complete": "script:wave2:complete",
            "length": 60,
            "measure": "seconds"
        });

        // Display timer / status message on screen
        map()
            .setWaveParams({
                "active-timer": "timerSurvive",
                "active-timer-label": "Survive!"
            });
	</script>
	<script name = 'wave2:add-enemy'>
		map().spawnRandomEnemies(
            1,
            {
                "disposable": False
            }
        );
	</script>
	<script name = 'wave2:cleanup'>
		// Remove timer(s)
        clearTimer("timerSurvive");
        clearTimer("timerAddEnemy");

        // End wave
        map().endWave();
	</script>
	<script name = 'wave2:complete'>
		map().executeScript("wave2:cleanup");

        // Track that we advanced to the next wave
        session("core.challenge.wave").increment(1);

        // Remove enemies
        map().removeEnemies();

        // Post complete nag
postNewsItem("Wave Complete!", "Prepare for another wave...");

        // Advance to next wave in a moment
        createTimer({
            "name": "timerNextWave",
            "on-complete": "script:wave3:begin",
            "length": 5,
            "measure": "seconds"
        });
	</script>
	<script name = 'wave3:begin'>
		map().executeScript("wave3:cleanup");

        // Params
        map()
            .disableAllGold()    // disable all gold; setting gold rotation will implicitly bring n pieces online

            // text labels
            .setParams({
                "overview": "Collect [color=special]20 gold pieces[/color] as an increasing number of enemies hunts you down!",
                "wave-goal": "Every [color=special]5th[/color] piece of gold you collect summons a [color=special]new enemy[/color].  Plan accordingly!"
            })

            .setWaveParams({
                "on-collect-gold": "wave3:collect-gold", // spawn enemy every nth piece
                "on-complete": "wave3:complete",         // complete wave script
                "gold-rotation-size": 3
            });

        // Player must collect 20 gold
        map().setWaveRequirement("gold", 20);

        // Show progress chart / begin new wave
        map()
            .showWaveProgressChart()
            .beginWave();


        // Start with 3 respawners
map().spawnRandomEnemies(
            3,
            {
                "disposable": False
            }
        );
	</script>
	<script name = 'wave3:cleanup'>
		// End wave
        map().endWave();
	</script>
	<script name = 'wave3:collect-gold'>
		if ( map().getWaveCounter("gold") % 5 == 0 )
        {
            // Add a new respawner
    map().spawnRandomEnemy({
                "disposable": False
            });
        }
	</script>
	<script name = 'wave3:complete'>
		map().executeScript("wave3:cleanup");

        // Remove enemies
        map().removeEnemies();

        // Post complete nag
postNewsItem("Wave Complete!", "All waves cleared...");

        // Show victory menu
        showChallengeOutro();
	</script>
</scripts>
