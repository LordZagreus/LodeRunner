<params>
	<param key = 'layer' value = '1' />
	<param key = 'type' value = 'challenge' />
</params>
<planes>
	<plane name = 'Untitled Plane' x = '0' y = '0' modal = '0'>
		<structure>
			119 119 118 0 117 116 111 119 117 0 116 119 111 116 117 0 118 119 117 
			98 0 148 150 229 0 0 0 0 0 0 0 0 0 0 147 234 0 99 
			96 154 119 116 116 217 0 0 0 0 0 0 0 218 117 117 116 153 96 
			207 153 98 99 0 0 218 0 0 0 0 0 217 0 0 98 96 154 207 
			118 154 96 0 0 0 149 149 0 0 151 0 231 147 0 0 98 154 117 
			98 152 0 0 153 119 118 52 110 52 111 50 119 119 153 0 0 152 98 
			97 154 0 0 152 98 0 0 0 0 0 0 0 97 152 0 0 153 96 
			207 154 0 217 152 232 0 219 219 153 216 218 0 0 153 217 0 154 208 
			116 154 110 0 111 119 152 0 0 153 151 149 152 117 110 0 111 152 118 
			96 154 231 0 0 99 119 110 49 208 52 111 119 99 0 0 0 154 96 
			98 152 116 153 0 0 0 0 0 0 0 0 0 0 0 153 119 153 96 
			210 152 96 117 153 150 150 0 149 0 233 0 147 149 152 117 98 154 207 
			118 154 99 97 118 110 118 49 117 152 116 53 118 111 119 97 99 154 116 
			99 152 150 0 0 0 150 147 230 154 148 150 0 230 148 0 0 154 99 
			110 111 119 50 119 119 51 119 117 54 118 117 51 119 116 54 119 110 111 
		</structure>
	</plane>
	<plane name = 'mask' x = '0' y = '0' modal = '1'>
		<structure>
			0 0 302 0 300 0 0 0 302 0 300 0 0 0 302 0 300 0 0 
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 0 0 302 0 0 0 0 0 0 0 0 0 0 0 300 0 0 0 
			0 0 302 0 0 0 0 0 0 0 0 0 0 0 0 0 300 0 0 
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 0 0 0 0 302 0 0 0 0 0 0 0 300 0 0 0 0 0 
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 0 0 0 0 300 0 0 0 0 0 0 0 302 0 0 0 0 0 
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 0 300 0 0 0 0 0 0 0 0 0 0 0 0 0 302 0 0 
			0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
			0 0 300 0 0 0 0 0 0 0 0 0 0 0 0 0 302 0 0 
		</structure>
	</plane>
</planes>
<entities>
	<entity x = '9' y = '11' genus = '2' ai-behavior = '1' name = 'player1' class = '' nick = '' title = '' />
	<entity x = '3' y = '0' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '9' y = '0' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '9' y = '1' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '8' y = '1' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '10' y = '1' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '9' y = '2' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '15' y = '0' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '11' y = '1' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '7' y = '1' genus = '5' ai-behavior = '1' name = '' class = '' nick = '' title = '' />
	<entity x = '7' y = '3' genus = '6' ai-behavior = '1' name = 'gold.uid.0' class = '' nick = '' title = '' />
	<entity x = '14' y = '1' genus = '6' ai-behavior = '1' name = 'gold.uid.1' class = '' nick = '' title = '' />
	<entity x = '9' y = '6' genus = '6' ai-behavior = '1' name = 'gold.uid.2' class = '' nick = '' title = '' />
	<entity x = '13' y = '7' genus = '6' ai-behavior = '1' name = 'gold.uid.3' class = '' nick = '' title = '' />
	<entity x = '2' y = '7' genus = '6' ai-behavior = '1' name = 'gold.uid.4' class = '' nick = '' title = '' />
	<entity x = '5' y = '13' genus = '6' ai-behavior = '1' name = 'gold.uid.5' class = '' nick = '' title = '' />
	<entity x = '12' y = '13' genus = '6' ai-behavior = '1' name = 'gold.uid.6' class = '' nick = '' title = '' />
	<entity x = '16' y = '9' genus = '6' ai-behavior = '1' name = 'gold.uid.7' class = '' nick = '' title = '' />
	<entity x = '7' y = '8' genus = '6' ai-behavior = '1' name = 'gold.uid.8' class = '' nick = '' title = '' />
	<entity x = '11' y = '11' genus = '6' ai-behavior = '1' name = 'gold.uid.9' class = '' nick = '' title = '' />
</entities>
<triggers>
	<trigger name = 'origin' x = '16' y = '13' width = '1' height = '1' behavior = '1' prompt = ''>
		<touch>
		</touch>
		<hover>
		</hover>
		<exit>
		</exit>
	</trigger>
</triggers>
<scripts>
	<script name = 'on-arrival'>
        if ( session("core.challenge.wave").get() == 1 ) { map().runScript("wave1:begin"); }
        elif ( session("core.challenge.wave").get() == 2 ) { map().runScript("wave2:begin"); }
        elif ( session("core.challenge.wave").get() == 3 ) { map().runScript("wave3:begin"); }
        else { map().runScript("wave1:begin"); }
    </script>
	<script name = 'wave1:begin'>
		map().executeScript("wave1:cleanup");

        // Params
        map()
            .enableAllGold()    // collect all gold

            // text labels
            .setParams({
                "overview": "Collect all of the gold before time runs out.",
                "wave-goal": "You must collect all of the gold within [color=special]60 seconds[/color].  You do [color=special]not[/color] receive a time bonus for collecting gold."
            })

            .setWaveParams({
                "on-complete": "wave1:complete"    // complete wave script
            });

        // Player must collect all of the gold
        map().setWaveRequirement(
            "gold",
            map().countGold()
        );

        // Show progress chart / begin new wave
        map()
            .showWaveProgressChart()
            .beginWave();


        // Start with 4 respawners
map().spawnRandomEnemies(
            4,
            {
                "disposable": False
            }
        );

        // Survival timer
        createTimer({
            "name": "timerLimit",
            "on-complete": "universe:kill-player",
            "length": 60,
            "measure": "seconds"
        });

        // Display timer / status message on screen
        map()
            .setWaveParams({
                "active-timer": "timerLimit",
                "active-timer-label": "Collect all of the Gold"
            });
	</script>
	<script name = 'wave1:cleanup'>
		// Remove timer(s)
        clearTimer("timerLimit");

        // End wave
        map().endWave();
	</script>
	<script name = 'wave1:complete'>
		map().executeScript("wave1:cleanup");

        // Track that we advanced to the next wave
        session("core.challenge.wave").increment(1);

        // Remove enemies
        map().removeEnemies();

        // Post complete nag
postNewsItem("Wave Complete!", "Prepare for another wave...");

        // Advance to next wave in a moment
        createTimer({
            "name": "timerNextWave",
            "on-complete": "script:wave2:begin",
            "length": 5,
            "measure": "seconds"
        });
	</script>
	<script name = 'wave2:begin'>
		map().executeScript("wave2:cleanup");

        // Params
        map()
            .disableAllGold()    // take all gold offline, irrelevant in this wave

            // text labels
            .setParams({
                "overview": "Kill all 10 enemies before they catch you.",
                "wave-goal": "You must defeat all of the enemies without access to bombs.  No more than [color=special]4 enemies[/color] will chase you at any given time."
            })

            .setWaveParams({
                "on-complete": "wave2:complete",    // complete wave script
                "on-enemy-kill": "wave2:add-enemy"  // until we've spawned 10 into the level
            });

        // Player must kill 10 enemies
        map().setWaveRequirement("enemy-kills", 10);

        // Show progress chart / begin new wave
        map()
            .showWaveProgressChart()
            .beginWave();


        // Track that we've spawned 0 new enemies
        session("tmp.enemy-spawns").set("0");

        // Start with 4 disposables.  We want 10, in the end...
map().spawnRandomEnemies(
            4,
            {
                "disposable": True
            }
        );
	</script>
	<script name = 'wave2:cleanup'>
		// Remove timer(s)
        // No timer on this wave...

        // End wave
        map().endWave();
	</script>
	<script name = 'wave2:add-enemy'>
		// We need to spawn 6 in to reach 10 total (4 at spawn)
        if ( session("tmp.enemy-spawns").get() &lt; 6 )
        {
            // Spawn a new disposable
            map().spawnRandomEnemies(
                1,
                {
                    "disposable": True
                }
            );

            // Note that we've spawned another enemy
            session("tmp.enemy-spawns").increment(1);
        }
	</script>
	<script name = 'wave2:complete'>
		map().executeScript("wave2:cleanup");

        // Track that we advanced to the next wave
        session("core.challenge.wave").increment(1);

        // Remove enemies
        map().removeEnemies();

        // Post complete nag
postNewsItem("Wave Complete!", "Prepare for another wave...");

        // Advance to next wave in a moment
        createTimer({
            "name": "timerNextWave",
            "on-complete": "script:wave3:begin",
            "length": 5,
            "measure": "seconds"
        });
	</script>
	<script name = 'wave3:begin'>
		map().executeScript("wave3:cleanup");

        // Params
        map()
            .disableAllGold()    // disable all gold; setting gold rotation will implicitly bring n pieces online

            // text labels
            .setParams({
                "overview": "Collect [color=special]25 gold pieces[/color] as an increasing number of enemies hunts you down!",
                "wave-goal": "Every [color=special]5th[/color] piece of gold you collect summons a [color=special]new enemy[/color].  Plan accordingly!"
            })

            .setWaveParams({
                "on-collect-gold": "wave3:collect-gold", // spawn enemy every nth piece
                "on-complete": "wave3:complete",         // complete wave script
                "gold-rotation-size": 3
            });

        // Player must collect 25 gold
        map().setWaveRequirement("gold", 25);

        // Show progress chart / begin new wave
        map()
            .showWaveProgressChart()
            .beginWave();


        // Start with 3 respawners
map().spawnRandomEnemies(
            3,
            {
                "disposable": False
            }
        );
	</script>
	<script name = 'wave3:cleanup'>
		// End wave
        map().endWave();
	</script>
	<script name = 'wave3:collect-gold'>
		if ( map().getWaveCounter("gold") % 5 == 0 )
        {
            // Add a new respawner
    map().spawnRandomEnemy({
                "disposable": False
            });
        }
	</script>
	<script name = 'wave3:complete'>
		map().executeScript("wave3:cleanup");

        // Remove enemies
        map().removeEnemies();

        // Post complete nag
postNewsItem("Wave Complete!", "All waves cleared...");

        // Show victory menu
        showChallengeOutro();
	</script>
</scripts>
